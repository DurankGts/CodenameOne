package com.codename1.samples;


import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.BrowserComponent;
import com.codename1.ui.Button;
import com.codename1.ui.CN;
import com.codename1.ui.layouts.BorderLayout;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class TestIOSWebView3062 {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Hi World", BoxLayout.y());
        Button start = new Button("Start");
        start.addActionListener(evt->{
            new WebForm().show();
        });
        hi.add(start);
        hi.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
    
    private class WebForm extends Form {
        WebForm() {
            super("WebView", new BorderLayout());
            final BrowserComponent cmp = new BrowserComponent();
            
            cmp.addWebEventListener(BrowserComponent.onLoad, evt->{
               cmp.addJSCallback("window.cb = json => {callback.onSuccess(json);};", json-> {
                    new ButtonForm().show();
                });
            });
            String html = "<!doctype html><html><body><button onclick='window.cb(); return false;'>Press Me</button></body></html>";
            cmp.setPage(html, null);
            add(CENTER, cmp);
        }
        
    }
    
    private class ButtonForm extends Form {
        ButtonForm() {
            super("ButtonForm", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
            Form back = CN.getCurrentForm();
            getToolbar().addCommandToLeftBar("Back", null, evt->{
                back.showBack();
            });
            Button b = new Button("Back");
            b.addActionListener(evt->{
                back.showBack();
            });
            
            add(CENTER, b);
            
        }
    }

}
